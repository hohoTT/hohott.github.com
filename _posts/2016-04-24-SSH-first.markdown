---
layout:     post
title:      "Struts2、Spring、Hibernate 框架介绍及框架的搭建"
subtitle:   " \"SSH 框架介绍及搭建\""
date:       2016-04-24 10:00:00
author:     "hohoTT"
header-img: "img/post-bg-rwd.jpg"
catalog: true
tags:
    - Java
    - Eclipse
    - SSH
---

## SSH 介绍
首先先来介绍以下 **Struts2** 、**Spring** 、**Hibernate** 即 **SSH** ：

集成 **SSH** 框架的系统从职责上分为四层：`表示层` 、`业务逻辑层`、`数据持久层` 和 `域模块层（实体层）`。

**Struts2** 作为系统的整体基础架构，负责 **MVC** 的分离，在Struts框架的模型部分，控制业务跳转，利用 **Hibernate** 框架对持久层提供支持。**Spring** 一方面作为一个轻量级的 **IoC** 容器，负责查找、定位、创建和管理对象及对象之间的依赖关系，另一方面能使 **Struts2** 和 **Hibernate** 更好地工作。

由SSH构建系统的基本业务流程是：

* 在 `表示层` 中，首先通过 **JSP** 页面实现交互界面，负责传送 **请求(Request)** 和接收 **响应(Response)**，然后 **Struts2** 根 **据配置文件(struts-config.xml)** 将 **ActionServlet** 接收到的 **Request** 委派给相应的 **Action** 处理。
* 在 `业务层` 中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。
* 在 `持久层` 中，则依赖于Hibernate的对象化映射和数据库交互，处理 **DAO** 组件请求的数据，并返回处理结果。


采用上述开发模型 **SSH** ，不仅实现了 `视图` 、`控制器` 与 `模型` 的彻底分离，而且还实现了业务逻辑层与持久层的分离。这样无论前端如何变化，模型层只需很少的改动，并且数据库的变化也不会对前端有所影响，大大提高了系统的可复用性。而且由于不同层之间耦合度小，有利于团队成员并行工作，大大提高了开发效率。

## SSH 框架详解

####  一、 **Spring**

 1. 什么是 **Spring**？
    简单来说，Spring是一个轻量级的 **控制反转（IoC）** 和 **面向切面（AOP）** 的容器框架。

 2. **Spring** 的特性
    ![](http://www.hohott.wang/img/writing_img/2016-4-24/spring.png)

 3. 为什么使用 **Spring** ？
    **Spring** 的以上特性使得开发人员使用基本的 **JavaBean** 来完成以前只可能由 **EJB** 完成的事情。然而，**Spring** 的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何 **Java** 应用都可以从 **Spring** 中受益。

#### 二、 **Struts 2**

 1. 什么是 **struts 2**
    **Struts 2** 是 **Struts** 的下一代产品，是在 **Struts 1** 和 **WebWork** 的技术基础上进行了合并的全新的 **Struts 2** 框架。其全新的 **Struts 2**的体系结构与 **Struts 1** 的体系结构差别巨大。**Struts 2** 以 **WebWork** 为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与 **ServletAPI** 完全脱离开，所以 **Struts 2** 可以理解为 **WebWork** 的更新产品

 2. **Strut 2** 的体系结构
    ![](http://www.hohott.wang/img/writing_img/2016-4-24/Struts2.png)

 3. 解析：
当 **Web容器** 收到 **请求（HttpServletRequest）** 它将请求传递给一个标准的的 `过滤链` 包括  流程 **（ActionContextCleanUp）过滤器**，然后经过 **Other filters(SiteMesh ,etc)** ,
接下来需要调用 **FilterDispatcher** `核心控制器`，然后它调用 **ActionMapper** 确定请求那个 **Action**， **ActionMapper** 返回一个收集 **Action** 详细信息的 **ActionMaping对象** 。
接下来 **FilterDispatcher** 将 `控制权` 委派给 **ActionProxy**, **ActionProxy** 调用 `配置管理器` **(ConfigurationManager)**  从配置文件中读取 `配置信息` **(struts.xml)**，然后创建 **ActionInvocation对象** ， **ActionInvocation** 在调用 **Action** 之前会依次的调用所用 `配置拦截器` **（Interceptor N）** 一旦执行结果返回结果字符串 **ActionInvocation** 负责查找 `结果字符串` 对应的 **(Result）** 然后执行这个 **Result Result**会调用一些模版 **(JSP)**
来呈现页面，之后 **拦截器(Interceptor N)** 会在被执行(顺序和 **Action** 执行之前相反)最后 **响应(HttpServletResponse)** 被返回在 **web.xml** 中配置的那些 `过滤器`和 `核心控制器` **（FilterDispatcher）** 。

 4. 为什么使用 **Struts 2** ？
 首先， **Struts 2** 是 **MVC** 的一种实现，它将 **Servlet** 和 **JSP** 标记（属于 J2EE 规范）用作实现的一部分。**Struts 2** 继承了 **MVC** 的各项特性，并根据 **J2EE** 的特点，做了相应的变化与扩展，减弱了 `业务逻辑接口` 和 `数据接口` 之间的耦合，以及让视图层更富于变化。
另外， **struts 2** 具有页面导航功能，使系统的脉络更加清晰。通过一个配置文件，即可把握整个系统各部分之间的联系，这对于后期的维护有着莫大的好处。尤其是当另一批开发者接手这个项目时，这种优势体现得更加明显。

#### 三、 **Hibernate**

 1. 什么是 **Hibernate** ？
 **Hibernate** 是一个开放源代码的对象关系映射框架，它对 **JDBC** 进行了非常轻量级的对象封装，使得 **Java** 程序员可以随心所欲的使用对象编程思维来操纵数据库。     **Hibernate** 可以应用在任何使用 **JDBC** 的场合，既可以在 **Java** 的客户端程序使用，也可以在 **Servlet/JSP** 的 **Web** 应用中使用，最具革命意义的是， **Hibernate** 可以在应用 **EJB** 的 **J2EE** 架构中取代 **CMP** ，完成 `数据持久化` 的重任

 2. **Hibernate** 核心构成
    ![](http://www.hohott.wang/img/writing_img/2016-4-24/Hibernate.png)

 3. **Hibernate** 基本执行流程
    ![](http://www.hohott.wang/img/writing_img/2016-4-24/Hibernate_work.png)

 4. 为什么使用 **Hibernate** ？
    <1>. 对 **JDBC** 访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。
    <2>. **Hibernate** 是一个优秀的 **ORM** 实现。他很大程度的简化 `DAO层` 的编码工作，将软件开发人员从大量相同的 `数据持久层` 相关编程工作中解放出来，使开发更 `对象化` 了。
    <3>. 移植性好，支持各种数据库，如果换个数据库只要在配置文件中变换配置就可以了，不用改变 **hibernate** 代码。
    <4>. 支持透明持久化，因为 **hibernate** 操作的是纯粹的**（pojo）java类** ，没有实现任何接口，没有侵入性。所以说它是一个轻量级框架。

#### 四、 **完成功能**
    **以下为整合完成时执行的示例，之后的文章中会介绍这部分的整合**

    <1>. 获取所有的员工信息: 若在 Dao 中只查询 Employee 的信息,
                而且 Employee 和 Department 还是使用的懒加载. 页面上还需要显示员工信息,
                此时会出现懒加载异常, 代理对象不能被初始化:
                    org.hibernate.LazyInitializationException:
                        could not initialize proxy - no Session
    解决:
        ① 打开懒加载: 不推荐使用
        ② 获取 Employee 时使用 迫切左外连接同时初始化其关联的 Department 对象.
        ③ 使用 OpenSessionInViewFilter: 后面再提.
    <2>. 删除员工信息:
        ① 正常删除, 返回值需要是 redirect 类型, 而且重定向到 emp-list
        ② 确定要删除吗? 的提示使用 jQuery 完成
        ③ Ajax 的使用参见 struts-2.3.15.3-all/struts-2.3.15.3/docs/WW/docs/ajax.html
    <3>. 添加员工:
        ① 显示表单页面: 需要先查询所有的部门信息
        ② 使用 Struts2 的 ModelDriven 和 Preparable 拦截器
        ③ 时间是一个字符串, 需要转为一个 Date 类型的对象

## 著作权声明
本文首次发布于 [hohoTT's Blog](http://www.hohott.wang/)，转载请保留 [http://www.hohott.wang/2016/04/24/SSH-first/](http://www.hohott.wang/2016/04/24/SSH-first/) 以上链接并附上作者 **hohoTT**。如果您喜欢，还可以关注我的微信公众号 **hohoTT** , 或者扫一扫下方的微信公众号二维码即可 ^_^。
<div align="center"><img src="http://www.hohott.wang/img/WeiXinImg.jpg"/></div>