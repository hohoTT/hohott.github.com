---
layout:     post
title:      "使用 JavaMail 进行邮件的发送"
subtitle:   " \"JavaMail使用\""
date:       2016-05-10 21:00:00
author:     "hohoTT"
header-img: "img/writing_img/2016-5-10/post-bg.jpg"
catalog: true
tags:
    - Java
    - JavMail
    - Velocity
---

## 技术介绍

#### JavaMail
**JavaMail** 是 **API**  是一个标准的 **Java** 扩展，它是 **J2EE** 的范畴，在 **J2EE** 开发过程中可能会需要用到这个 **API** 。在学习 **JavaMail** 之前，有必须要对现在的 `互联网的邮件协议` 进行有个大体的了解。

发送消息最重要的是要正确的找到发送消息的 **邮件服务器名** ，至于 `收信人` 的邮箱无所谓，可以是任意正确的邮件，譬如 `发送人` 是 `163邮件`，可以发送给 `搜狐邮箱`，`新浪邮箱`，`QQ邮箱`。

#### Velocity
**Apache Velocity** 是一个基于 **Java** 的模板引擎，它提供了一个模板语言去引用由 **Java** 代码定义的对象。**Velocity** 是 **Apache** 基金会旗下的一个 `开源软件项目` ，旨在确保 **Web应用程序** 在 `表示层` 和 `业务逻辑层` 之间的隔离（即 **MVC设计模式** ）。

此项目中主要实现的是，使用 **Velocity** 进行邮件样式的设置，其实说白了，最后的 `邮箱样式` 其实就是我们平时常涉及到的 **html** ，我们在这里实现的是首先创建一个 **html模板** (即我们邮件最后呈现的展示效果)。再通过 **Velocity** 来将 **html模板** 进行发送，这里用到的其实是将 **html模板** 转换为字符串的形式，最后进行发送，但是最后呈现的效果为 **html** 的样式。

#### 功能介绍
实现的为通过 **JavaMail** `实现邮件的发送` ，`实现用户的密码修改功能` ，我的实现形式为 `后端` 生成 **随机的六位数字字符串** ，之后发送邮件。
用户查询邮件，页面中输入邮件中的六位数字字符串，此时再将 `前端` 输入的与 `后端` 字符进行 `匹配`，至此完成 `发送邮件` **实现用户密码的修改任务**。

#### AJAX前端验证技术
当然前端还有我们的 **AJAX技术** 的验证，这个我之前的博文有涉及。

不明白的可以看下之前讲解的
[AJAX技术之Struts2 中配置文件设置向前端返回的状态码](http://www.hohott.wang/2016/05/01/struts2-httpheader/)

#### 效果图
 - 这样吧，我先放出最后的 **效果图 ~**

<div align="center"><img src="http://www.hohott.wang/img/writing_img/2016-5-10/result.png"/></div>

以上就是使用了 **Velocity模板** 创建的 `邮件` ，是不是还挺不错的啊 : )
 
## 代码实现

 - 代码在每一部分都有相关的解释，跟着一步步做就好了

#### jar 包

 - 首先是我们需要的 **jar 包**

<div align="center"><img src="http://www.hohott.wang/img/writing_img/2016-5-10/jar.png"/></div>

#### MailSenderInfo

 - 首先创建一个 **保存发送邮件** 需要使用的 `基本信息` 的类

```java
package com.wt.utilMail;

import java.util.Properties;

public class MailSenderInfo {
	// 发送邮件的服务器的IP和端口
	private String mailServerHost;
	private String mailServerPort = "25";
	// 邮件发送者的地址
	private String fromAddress;
	// 邮件接收者的地址
	private String toAddress;
	// 登陆邮件发送服务器的用户名和密码
	private String userName;
	private String password;
	// 是否需要身份验证
	private boolean validate = false;
	// 邮件主题
	private String subject;
	// 邮件的文本内容
	private String content;
	// 邮件附件的文件名
	private String[] attachFileNames;

	/**
	 * 获得邮件会话属性
	 */
	public Properties getProperties() {
		Properties p = new Properties();
		p.put("mail.smtp.host", this.mailServerHost);
		p.put("mail.smtp.port", this.mailServerPort);
		p.put("mail.smtp.auth", validate ? "true" : "false");
		return p;
	}

	public String getMailServerHost() {
		return mailServerHost;
	}

	public void setMailServerHost(String mailServerHost) {
		this.mailServerHost = mailServerHost;
	}

	public String getMailServerPort() {
		return mailServerPort;
	}

	public void setMailServerPort(String mailServerPort) {
		this.mailServerPort = mailServerPort;
	}

	public boolean isValidate() {
		return validate;
	}

	public void setValidate(boolean validate) {
		this.validate = validate;
	}

	public String[] getAttachFileNames() {
		return attachFileNames;
	}

	public void setAttachFileNames(String[] fileNames) {
		this.attachFileNames = fileNames;
	}

	public String getFromAddress() {
		return fromAddress;
	}

	public void setFromAddress(String fromAddress) {
		this.fromAddress = fromAddress;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getToAddress() {
		return toAddress;
	}

	public void setToAddress(String toAddress) {
		this.toAddress = toAddress;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String textContent) {
		this.content = textContent;
	}
}
```

#### SimpleMailSender

```java
package com.wt.utilMail;

import java.util.Date;    
import java.util.Properties;   
import javax.mail.Address;    
import javax.mail.BodyPart;    
import javax.mail.Message;    
import javax.mail.MessagingException;    
import javax.mail.Multipart;    
import javax.mail.Session;    
import javax.mail.Transport;    
import javax.mail.internet.InternetAddress;    
import javax.mail.internet.MimeBodyPart;    
import javax.mail.internet.MimeMessage;    
import javax.mail.internet.MimeMultipart;    
  
   
public class SimpleMailSender  {    
/**   
  * 以文本格式发送邮件   
  * @param mailInfo 待发送的邮件的信息   
  */    
    public boolean sendTextMail(MailSenderInfo mailInfo) {    
      // 判断是否需要身份认证    
      MyAuthenticator authenticator = null;    
      Properties pro = mailInfo.getProperties();   
      if (mailInfo.isValidate()) {    
      // 如果需要身份认证，则创建一个密码验证器    
        authenticator = new MyAuthenticator(mailInfo.getUserName(), mailInfo.getPassword());    
      }   
      // 根据邮件会话属性和密码验证器构造一个发送邮件的session    
      Session sendMailSession = Session.getDefaultInstance(pro,authenticator);    
      try {    
      // 根据session创建一个邮件消息    
      Message mailMessage = new MimeMessage(sendMailSession);    
      // 创建邮件发送者地址    
      Address from = new InternetAddress(mailInfo.getFromAddress());    
      // 设置邮件消息的发送者    
      mailMessage.setFrom(from);    
      // 创建邮件的接收者地址，并设置到邮件消息中    
      Address to = new InternetAddress(mailInfo.getToAddress());    
      mailMessage.setRecipient(Message.RecipientType.TO,to);    
      // 设置邮件消息的主题    
      mailMessage.setSubject(mailInfo.getSubject());    
      // 设置邮件消息发送的时间    
      mailMessage.setSentDate(new Date());    
      // 设置邮件消息的主要内容    
      String mailContent = mailInfo.getContent();    
      mailMessage.setText(mailContent);    
      // 发送邮件    
      Transport.send(mailMessage);   
      return true;    
      } catch (MessagingException ex) {    
          ex.printStackTrace();    
      }    
      return false;    
    }    
       
    /**   
      * 以HTML格式发送邮件   
      * @param mailInfo 待发送的邮件信息   
      */    
    public static boolean sendHtmlMail(MailSenderInfo mailInfo){    
      // 判断是否需要身份认证    
      MyAuthenticator authenticator = null;   
      Properties pro = mailInfo.getProperties();   
      //如果需要身份认证，则创建一个密码验证器     
      if (mailInfo.isValidate()) {    
        authenticator = new MyAuthenticator(mailInfo.getUserName(), mailInfo.getPassword());   
      }    
      // 根据邮件会话属性和密码验证器构造一个发送邮件的session    
      Session sendMailSession = Session.getDefaultInstance(pro,authenticator);    
      try {    
      // 根据session创建一个邮件消息    
      Message mailMessage = new MimeMessage(sendMailSession);    
      // 创建邮件发送者地址    
      Address from = new InternetAddress(mailInfo.getFromAddress());    
      // 设置邮件消息的发送者    
      mailMessage.setFrom(from);    
      // 创建邮件的接收者地址，并设置到邮件消息中    
      Address to = new InternetAddress(mailInfo.getToAddress());    
      // Message.RecipientType.TO属性表示接收者的类型为TO    
      mailMessage.setRecipient(Message.RecipientType.TO,to);    
      // 设置邮件消息的主题    
      mailMessage.setSubject(mailInfo.getSubject());    
      // 设置邮件消息发送的时间    
      mailMessage.setSentDate(new Date());    
      // MiniMultipart类是一个容器类，包含MimeBodyPart类型的对象    
      Multipart mainPart = new MimeMultipart();    
      // 创建一个包含HTML内容的MimeBodyPart    
      BodyPart html = new MimeBodyPart();    
      // 设置HTML内容    
      html.setContent(mailInfo.getContent(), "text/html; charset=utf-8");    
      mainPart.addBodyPart(html);    
      // 将MiniMultipart对象设置为邮件内容    
      mailMessage.setContent(mainPart);    
      // 发送邮件    
      Transport.send(mailMessage);    
      return true;    
      } catch (MessagingException ex) {    
          ex.printStackTrace();    
      }    
      return false;    
    }    
}   

```

#### MyAuthenticator

```java
package com.wt.utilMail;

import javax.mail.*;   

public class MyAuthenticator extends Authenticator{   
    String userName=null;   
    String password=null;   
        
    public MyAuthenticator(){   
    }   
    public MyAuthenticator(String username, String password) {    
        this.userName = username;    
        this.password = password;    
    }    
    protected PasswordAuthentication getPasswordAuthentication(){   
        return new PasswordAuthentication(userName, password);   
    }   
}   
```

#### 最后的测试类

```java
package com.wt.utilMail;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;


public class Test {
	
	public static void main(String[] args) {
		
		VelocityEngine ve = new VelocityEngine();
		ve.setProperty(RuntimeConstants.RESOURCE_LOADER, "classpath");
		ve.setProperty("classpath.resource.loader.class", ClasspathResourceLoader.class.getName());
		 
		ve.init();
		 
		Template template = ve.getTemplate("template/emailTemplate.vm", "gbk");
		VelocityContext ctx = new VelocityContext();
		
		// 生成六位随机字符串
		String chars = "0123456789";  
	    String randomNum ="";
	    
		char[] rands = new char[6];  
		
	    for (int i = 0; i < 6; i++) { 
	    	int rand = (int) (Math.random() * 10);  
	        rands[i] = chars.charAt(rand);  
			randomNum += rands[i];
	    }  
	    
	    System.out.println(randomNum);
		 
		ctx.put("title", "物流配送管理系统");
		ctx.put("username", "hohoTT");
		ctx.put("randomNum", randomNum);
		 
		StringWriter sw = new StringWriter();
		 
		template.merge(ctx, sw);
		 
		System.out.println(sw.toString());
	 
		
		//这个类主要是设置邮件   
		MailSenderInfo mailInfo = new MailSenderInfo();    
		mailInfo.setMailServerHost("smtp.163.com");    
		mailInfo.setMailServerPort("25");    
		mailInfo.setValidate(true);    
		mailInfo.setUserName("walk_wang_tt@163.com");
		
		// 开通smtp等服务时，设置你的邮箱授权码
		// 此时输入的为邮箱的授权码，而不是你的邮箱密码
		mailInfo.setPassword("******"); 
      	mailInfo.setFromAddress("****@**.com");    
      	mailInfo.setToAddress("****@**.com");    
      	mailInfo.setSubject("物流配送管理系统 登录信息找回");    
      	mailInfo.setContent(sw.toString());    
      	//这个类主要来发送邮件   
      	SimpleMailSender sms = new SimpleMailSender();   
      	//sms.sendTextMail(mailInfo);//发送文体格式    
      	
      	
		sms.sendHtmlMail(mailInfo);//发送html格式   
	}

}

```

#### html vm模板文件

 - 以下的这个部分就是我之前所提及的使用 **Velocity** 所接收的 **html 模板** 

```html
<html>
<table cellpadding="0" cellspacing="0" align="center" style="text-align:left;font-family:'微软雅黑','黑体',arial;"
       width="742">
    <tbody>
    <tr>
        <td>
            <table cellpadding="0" cellspacing="0"
                   style="text-align:left;border:1px solid #50a5e6;color:#fff;font-size:18px;" width="740">
                <tbody>
                <tr height="39" style="background-color:#50a5e6;">
                    <td style="padding-left:15px;font-family:'微软雅黑','黑体',arial;">
                        ${title} 登录信息找回
                    </td>
                </tr>
                </tbody>
            </table>
            <table cellpadding="0" cellspacing="0"
                   style="text-align:left;border:1px solid #f0f0f0;border-top:none;color:#585858;background-color:#fafafa;"
                   width="740">
                <tbody>
                <tr height="25">
                    <td></td>
                </tr>

                <tr height="40">
                    <td style="padding-left:25px;padding-right:25px;font-size:18px;font-family:'微软雅黑','黑体',arial;">
                        Hello, ${username}:
                    </td>
                </tr>

                <tr height="15">
                    <td></td>
                </tr>
                <tr height="30">
                    <td style="padding-left:55px;padding-right:55px;font-family:'微软雅黑','黑体',arial;font-size:14px;">
                        您刚刚在 ${title} 申请了找回登录信息服务。
                    </td>
                </tr>
                <tr height="30">
                    <td style="padding-left:55px;padding-right:55px;font-family:'微软雅黑','黑体',arial;font-size:14px;">
                        请在<span style="color:rgb(255,0,0)">30分钟</span>内输入下面的重置密钥来设置您的新密码：
                    </td>
                </tr>
                <tr height="60">
                    <td style="padding-left:55px;padding-right:55px;font-family:'微软雅黑','黑体',arial;font-size:14px;">
                        <button
                           style="color: rgb(255,255,255);text-decoration: none;display: block;min-height: 39px;width: 158px;line-height: 39px;background-color:rgb(80,165,230);font-size:20px;text-align:center;">${randomNum}</button>
                    </td>
                </tr>
                <tr height="10">
                    <td></td>
                </tr>
                <tr height="20">
                    <td style="padding-left:55px;padding-right:55px;font-family:'微软雅黑','黑体',arial;font-size:12px;">
                        如果您没有提出过该申请，请忽略此邮件。有可能是其他用户误填了您的邮件地址，我们不会对你的帐户进行任何修改。
                        请不要向他人透露本邮件的内容，否则可能会导致您的账号被盗。
                    </td>
                </tr>
                <tr height="20">
                    <td></td>
                </tr>
                </tbody>
            </table>
        </td>
    </tr>
    </tbody>
</table>
</html>
```

## 效果展示

 - 接下来的是在我们邮箱中 **接受到的邮件**
 
<div align="center"><img src="http://www.hohott.wang/img/writing_img/2016-5-10/result.png"/></div>
  
按照我之前的所说的一步步做下来，就可以实现以上的效果了，是不是还挺不错的啊 : )

快点试一试吧 : )

## 著作权声明
本文首次发布于 [hohoTT's Blog](http://www.hohott.wang/)，转载请保留 [http://www.hohott.wang/2016/05/10/Java-Mail/](http://www.hohott.wang/2016/05/10/Java-Mail/) 以上链接并附上作者 **hohoTT**。如果您喜欢，还可以关注我的微信公众号 **hohoTT** , 或者扫一扫下方的微信公众号二维码即可 ^_^。
<div align="center"><img src="http://www.hohott.wang/img/WeiXinImg.jpg"/></div>









